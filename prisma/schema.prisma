// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  email        String        @unique
  studio       Media?
  firstname    String?
  lastname     String?
  clerkid      String        @unique
  image        String?
  trial        Boolean       @default(false)
  workspace    WorkSpace[]
  videos       Video[]
  members      Member[]
  subscription Subscription?
  notificaion  Notificaion[]
  sender       Invite[]      @relation("sender")
  reciever     Invite[]      @relation("reciever")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Invite       Invite[]
}

enum PRESET {
  HD
  SD
}

model Media {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.Uuid
}

enum Type {
  PERSONAL
  PUBLIC
}

model WorkSpace {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name      String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique @db.Uuid
  type      Type
  createdAt DateTime @default(now())

  folders Folder[]
  videos  Video[]
  members Member[]
  invite  Invite[]
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  User       User?             @relation(fields: [userId], references: [id])
  userId     String            @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now()) @updatedAt
  customerId String            @unique
}

model Folder {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  videos      Video[]
}

model Video {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  title       String?  @default("Untitled Folder")
  description String?  @default("No Description")
  source      String   @unique
  createdAt   DateTime @default(now())
  Folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?  @db.Uuid

  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?    @db.Uuid

  User       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String? @db.Uuid
  processing Boolean @default(true)
  views      Int     @default(0)
  summary    String?
}

model Member {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  createdAt   DateTime   @default(now())
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.Uuid
  member      Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
}

model Notificaion {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.Uuid
  content   String
}

model Invite {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  reciever    User?      @relation("reciever", fields: [recieverId], references: [id])
  recieverId  String?    @db.Uuid
  content     String
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?    @db.Uuid
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid()
  accepted    Boolean    @default(false)
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.Uuid
}
